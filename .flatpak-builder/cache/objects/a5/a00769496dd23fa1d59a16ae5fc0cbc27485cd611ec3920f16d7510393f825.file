/* Application.c generated by valac 0.50.5, the Vala compiler
 * generated from Application.vala, do not modify */

/*
* Copyright (c) 2011-2018 Your Organization (https://linkedin.com/saidbakr)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Said Bakr <said_fox/AT/yahoo.com>
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#define TYPE_MY_APP (my_app_get_type ())
#define MY_APP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MY_APP, MyApp))
#define MY_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MY_APP, MyAppClass))
#define IS_MY_APP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MY_APP))
#define IS_MY_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MY_APP))
#define MY_APP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MY_APP, MyAppClass))

typedef struct _MyApp MyApp;
typedef struct _MyAppClass MyAppClass;
typedef struct _MyAppPrivate MyAppPrivate;
enum  {
	MY_APP_0_PROPERTY,
	MY_APP_NUM_PROPERTIES
};
static GParamSpec* my_app_properties[MY_APP_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _Block1Data Block1Data;

struct _MyApp {
	GtkApplication parent_instance;
	MyAppPrivate * priv;
};

struct _MyAppClass {
	GtkApplicationClass parent_class;
};

struct _Block1Data {
	int _ref_count_;
	MyApp* self;
	GtkWindow* window;
	GtkButton* cancel;
};

static gpointer my_app_parent_class = NULL;

GType my_app_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MyApp, g_object_unref)
MyApp* my_app_new (void);
MyApp* my_app_construct (GType object_type);
static void my_app_real_activate (GApplication* base);
gboolean my_app_confirmActive (MyApp* self);
GObject* my_app_createConfirm (MyApp* self);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static void _gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                        gpointer self);
static void __lambda4_ (MyApp* self);
static void ___lambda4__gtk_button_clicked (GtkButton* _sender,
                                     gpointer self);
static void __lambda5_ (Block1Data* _data1_);
static void ___lambda5__gtk_button_clicked (GtkButton* _sender,
                                     gpointer self);
gint my_app_main (gchar** args,
                  gint args_length1);
static GType my_app_get_type_once (void);

MyApp*
my_app_construct (GType object_type)
{
	MyApp * self = NULL;
#line 23 "../src/Application.vala"
	self = (MyApp*) g_object_new (object_type, "application-id", "com.github.saidbakr.quick-shutdown", "flags", G_APPLICATION_FLAGS_NONE, NULL);
#line 22 "../src/Application.vala"
	return self;
#line 99 "Application.c"
}

MyApp*
my_app_new (void)
{
#line 22 "../src/Application.vala"
	return my_app_construct (TYPE_MY_APP);
#line 107 "Application.c"
}

static void
my_app_real_activate (GApplication* base)
{
	MyApp * self;
#line 28 "../src/Application.vala"
	self = (MyApp*) base;
#line 29 "../src/Application.vala"
	if (my_app_confirmActive (self)) {
#line 118 "Application.c"
		GObject* _tmp0_;
		GObject* _tmp1_;
#line 31 "../src/Application.vala"
		_tmp0_ = my_app_createConfirm (self);
#line 31 "../src/Application.vala"
		_tmp1_ = _tmp0_;
#line 31 "../src/Application.vala"
		_g_object_unref0 (_tmp1_);
#line 127 "Application.c"
	} else {
#line 34 "../src/Application.vala"
		system ("shutdown now");
#line 131 "Application.c"
	}
}

gboolean
my_app_confirmActive (MyApp* self)
{
	GFile* file = NULL;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	GFile* _tmp3_;
	GFile* _tmp4_;
	GFile* _tmp5_;
	gboolean result = FALSE;
#line 40 "../src/Application.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 41 "../src/Application.vala"
	_tmp0_ = g_get_home_dir ();
#line 41 "../src/Application.vala"
	_tmp1_ = g_strconcat (_tmp0_, "/.config/com.github.saidbakr.quick-shutdown/confirm", NULL);
#line 41 "../src/Application.vala"
	_tmp2_ = _tmp1_;
#line 41 "../src/Application.vala"
	_tmp3_ = g_file_new_for_path (_tmp2_);
#line 41 "../src/Application.vala"
	_tmp4_ = _tmp3_;
#line 41 "../src/Application.vala"
	_g_free0 (_tmp2_);
#line 41 "../src/Application.vala"
	file = _tmp4_;
#line 42 "../src/Application.vala"
	_tmp5_ = file;
#line 42 "../src/Application.vala"
	if (g_file_query_exists (_tmp5_, NULL)) {
#line 43 "../src/Application.vala"
		result = TRUE;
#line 43 "../src/Application.vala"
		_g_object_unref0 (file);
#line 43 "../src/Application.vala"
		return result;
#line 172 "Application.c"
	} else {
#line 46 "../src/Application.vala"
		result = FALSE;
#line 46 "../src/Application.vala"
		_g_object_unref0 (file);
#line 46 "../src/Application.vala"
		return result;
#line 180 "Application.c"
	}
#line 40 "../src/Application.vala"
	_g_object_unref0 (file);
#line 184 "Application.c"
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
#line 52 "../src/Application.vala"
	g_atomic_int_inc (&_data1_->_ref_count_);
#line 52 "../src/Application.vala"
	return _data1_;
#line 194 "Application.c"
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
#line 52 "../src/Application.vala"
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
#line 204 "Application.c"
		MyApp* self;
#line 52 "../src/Application.vala"
		self = _data1_->self;
#line 52 "../src/Application.vala"
		_g_object_unref0 (_data1_->cancel);
#line 52 "../src/Application.vala"
		_g_object_unref0 (_data1_->window);
#line 52 "../src/Application.vala"
		_g_object_unref0 (self);
#line 52 "../src/Application.vala"
		g_slice_free (Block1Data, _data1_);
#line 216 "Application.c"
	}
}

static void
_gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                   gpointer self)
{
#line 64 "../src/Application.vala"
	gtk_main_quit ();
#line 226 "Application.c"
}

static void
__lambda4_ (MyApp* self)
{
#line 73 "../src/Application.vala"
	system ("shutdown now");
#line 234 "Application.c"
}

static void
___lambda4__gtk_button_clicked (GtkButton* _sender,
                                gpointer self)
{
#line 72 "../src/Application.vala"
	__lambda4_ ((MyApp*) self);
#line 243 "Application.c"
}

static void
__lambda5_ (Block1Data* _data1_)
{
	MyApp* self;
#line 76 "../src/Application.vala"
	self = _data1_->self;
#line 77 "../src/Application.vala"
	gtk_button_set_label (_data1_->cancel, "Thank you");
#line 78 "../src/Application.vala"
	gtk_window_close (_data1_->window);
#line 256 "Application.c"
}

static void
___lambda5__gtk_button_clicked (GtkButton* _sender,
                                gpointer self)
{
#line 76 "../src/Application.vala"
	__lambda5_ (self);
#line 265 "Application.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 87 "../src/Application.vala"
	return self ? g_object_ref (self) : NULL;
#line 273 "Application.c"
}

GObject*
my_app_createConfirm (MyApp* self)
{
	Block1Data* _data1_;
	GtkWindow* _tmp0_;
	GtkGrid* grid = NULL;
	GtkGrid* _tmp1_ = NULL;
	GtkLabel* label = NULL;
	GtkLabel* _tmp2_;
	GtkButton* shutdown = NULL;
	GtkButton* _tmp3_;
	GtkButton* _tmp4_;
	GObject* _tmp5_;
	GObject* result = NULL;
#line 52 "../src/Application.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 52 "../src/Application.vala"
	_data1_ = g_slice_new0 (Block1Data);
#line 52 "../src/Application.vala"
	_data1_->_ref_count_ = 1;
#line 52 "../src/Application.vala"
	_data1_->self = g_object_ref (self);
#line 53 "../src/Application.vala"
	_tmp0_ = (GtkWindow*) gtk_window_new (GTK_WINDOW_TOPLEVEL);
#line 53 "../src/Application.vala"
	g_object_ref_sink (_tmp0_);
#line 53 "../src/Application.vala"
	_data1_->window = _tmp0_;
#line 54 "../src/Application.vala"
	_tmp1_ = (GtkGrid*) gtk_grid_new ();
#line 54 "../src/Application.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp1_, GTK_ORIENTATION_VERTICAL);
#line 54 "../src/Application.vala"
	gtk_grid_set_column_spacing (_tmp1_, 6);
#line 54 "../src/Application.vala"
	gtk_grid_set_row_spacing (_tmp1_, 6);
#line 54 "../src/Application.vala"
	g_object_ref_sink (_tmp1_);
#line 54 "../src/Application.vala"
	grid = _tmp1_;
#line 59 "../src/Application.vala"
	gtk_container_add ((GtkContainer*) _data1_->window, (GtkWidget*) grid);
#line 60 "../src/Application.vala"
	gtk_window_set_title (_data1_->window, "Shutdown Confirmation");
#line 61 "../src/Application.vala"
	gtk_container_set_border_width ((GtkContainer*) _data1_->window, (guint) 10);
#line 62 "../src/Application.vala"
	g_object_set (_data1_->window, "window-position", GTK_WIN_POS_CENTER, NULL);
#line 63 "../src/Application.vala"
	gtk_window_set_default_size (_data1_->window, 350, 80);
#line 64 "../src/Application.vala"
	g_signal_connect ((GtkWidget*) _data1_->window, "destroy", (GCallback) _gtk_main_quit_gtk_widget_destroy, NULL);
#line 66 "../src/Application.vala"
	_tmp2_ = (GtkLabel*) gtk_label_new (NULL);
#line 66 "../src/Application.vala"
	g_object_ref_sink (_tmp2_);
#line 66 "../src/Application.vala"
	label = _tmp2_;
#line 67 "../src/Application.vala"
	gtk_label_set_text (label, "Are you sure to turn off now?");
#line 70 "../src/Application.vala"
	_tmp3_ = (GtkButton*) gtk_button_new_with_label ("Shutdown Now");
#line 70 "../src/Application.vala"
	g_object_ref_sink (_tmp3_);
#line 70 "../src/Application.vala"
	shutdown = _tmp3_;
#line 72 "../src/Application.vala"
	g_signal_connect_object (shutdown, "clicked", (GCallback) ___lambda4__gtk_button_clicked, self, 0);
#line 75 "../src/Application.vala"
	_tmp4_ = (GtkButton*) gtk_button_new_with_label ("Cancel");
#line 75 "../src/Application.vala"
	g_object_ref_sink (_tmp4_);
#line 75 "../src/Application.vala"
	_data1_->cancel = _tmp4_;
#line 76 "../src/Application.vala"
	g_signal_connect_data (_data1_->cancel, "clicked", (GCallback) ___lambda5__gtk_button_clicked, block1_data_ref (_data1_), (GClosureNotify) block1_data_unref, 0);
#line 81 "../src/Application.vala"
	gtk_grid_attach (grid, (GtkWidget*) label, 0, 0, 1, 1);
#line 82 "../src/Application.vala"
	gtk_grid_attach (grid, (GtkWidget*) shutdown, 0, 1, 1, 1);
#line 83 "../src/Application.vala"
	gtk_grid_attach (grid, (GtkWidget*) _data1_->cancel, 1, 1, 1, 1);
#line 84 "../src/Application.vala"
	gtk_widget_show_all ((GtkWidget*) _data1_->window);
#line 86 "../src/Application.vala"
	gtk_main ();
#line 87 "../src/Application.vala"
	_tmp5_ = _g_object_ref0 ((GObject*) _data1_->window);
#line 87 "../src/Application.vala"
	result = _tmp5_;
#line 87 "../src/Application.vala"
	_g_object_unref0 (shutdown);
#line 87 "../src/Application.vala"
	_g_object_unref0 (label);
#line 87 "../src/Application.vala"
	_g_object_unref0 (grid);
#line 87 "../src/Application.vala"
	block1_data_unref (_data1_);
#line 87 "../src/Application.vala"
	_data1_ = NULL;
#line 87 "../src/Application.vala"
	return result;
#line 378 "Application.c"
}

gint
my_app_main (gchar** args,
             gint args_length1)
{
	MyApp* app = NULL;
	MyApp* _tmp0_;
	gint result = 0;
#line 90 "../src/Application.vala"
	_tmp0_ = my_app_new ();
#line 90 "../src/Application.vala"
	app = _tmp0_;
#line 91 "../src/Application.vala"
	result = g_application_run ((GApplication*) app, (gint) args_length1, args);
#line 91 "../src/Application.vala"
	_g_object_unref0 (app);
#line 91 "../src/Application.vala"
	return result;
#line 398 "Application.c"
}

int
main (int argc,
      char ** argv)
{
#line 89 "../src/Application.vala"
	return my_app_main (argv, argc);
#line 407 "Application.c"
}

static void
my_app_class_init (MyAppClass * klass,
                   gpointer klass_data)
{
#line 21 "../src/Application.vala"
	my_app_parent_class = g_type_class_peek_parent (klass);
#line 21 "../src/Application.vala"
	((GApplicationClass *) klass)->activate = (void (*) (GApplication*)) my_app_real_activate;
#line 418 "Application.c"
}

static void
my_app_instance_init (MyApp * self,
                      gpointer klass)
{
}

static GType
my_app_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (MyAppClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) my_app_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (MyApp), 0, (GInstanceInitFunc) my_app_instance_init, NULL };
	GType my_app_type_id;
	my_app_type_id = g_type_register_static (gtk_application_get_type (), "MyApp", &g_define_type_info, 0);
	return my_app_type_id;
}

GType
my_app_get_type (void)
{
	static volatile gsize my_app_type_id__volatile = 0;
	if (g_once_init_enter (&my_app_type_id__volatile)) {
		GType my_app_type_id;
		my_app_type_id = my_app_get_type_once ();
		g_once_init_leave (&my_app_type_id__volatile, my_app_type_id);
	}
	return my_app_type_id__volatile;
}

